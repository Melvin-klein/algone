{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Algone Library","text":"<p>Algone is a machine learning and data science library written in C.</p> <p>Contributions are open and welcome for every one \ud83d\ude01</p>"},{"location":"#organisation-of-the-documentation","title":"Organisation of the documentation","text":"<ul> <li>Get started - Get an overview of how the library works.</li> <li>Documentation - Discover all things Algone made possible.</li> <li>Tutorials - Learn step by step how to solve toy machine learning problems.</li> <li>References - Get the description of all available elements in Algone library.</li> <li>Download - Download the library.</li> </ul>"},{"location":"#get-started","title":"Get started","text":""},{"location":"#installation","title":"Installation","text":"<p>Please, don't use Algone in production. The library comes with any guarantee that it will work properly.</p> <ol> <li>Follow the Download link and extract the archive.</li> <li>Put header files in a folder and the <code>libalgone.a</code> in another one.</li> <li>Include the <code>algone.h</code> header by writting <code>#include \"algone.h\"</code></li> <li>Specify folders where headers and lib are installed in your compilation command.</li> </ol>"},{"location":"#load-data","title":"Load Data","text":"<p>First, we must have data to train our neural network. You can load data from a CSV using the function <code>ALG_ReadCSV</code>.</p> <pre><code>#include \"algone.h\"\n\nALG_DataFrame = ALG_ReadCSV(\"path/to/your/file.csv\");\n</code></pre>"},{"location":"#create-the-network","title":"Create the network","text":"<p>Algone have a multiple ways to create a neural network. In this example we start with a bare neural network.</p> <pre><code>ALG_Network* n = ALG_CreateBareNetwork(10);\n</code></pre>"},{"location":"documentation/errors/","title":"Handle errors","text":"<p>After each call to an Algone function, you should check whether an error has occurred. You can handle errors through the functions <code>ALG_HasError()</code>, <code>ALG_GetError()</code> and <code>ALG_PrintError()</code>.</p>"},{"location":"documentation/errors/#print-error","title":"Print error","text":"<p>If you just want to print the error on the standard output stream, you can use the <code>ALG_PrintError()</code> function. For instance, if you use the <code>ALG_CreateNetworkFromFile()</code> with a wrong <code>path</code>, you can handle errors by the following code :</p> <pre><code>FILE *file = fopen(\"path/to/badly_formatted_file.model.alg\", \"r\");\nALG_Network* n = ALG_CreateNetworkFromFile(file);\n\nif (ALG_HasError()) {\n    ALG_PrintError()\n}\n</code></pre> <p>The function <code>ALG_PrintError()</code> will print error on the standard output stream.</p>"},{"location":"documentation/errors/#get-error","title":"Get error","text":"<p>If you want to be more precise when you handle errors, instead of using <code>ALG_PrintError()</code> you can use <code>ALG_GetError()</code>. This function returns an <code>ALG_Error</code> struct that contains the error code and the error message.</p> <p>For instance :</p> <pre><code>// Create a network from a badly formatted file\nFILE *file = fopen(\"path/to/badly_formatted_file.model.alg\", \"r\");\nALG_Network* n = ALG_CreateNetworkFromFile(file);\n\n// Handle the error\nif (ALG_HasError()) {\n    ALG_Error* e = ALG_GetError();\n\n    if (e.code == ALG_INCOMPATIBLE_ERROR) {\n        // do something ...\n    }\n}\n</code></pre>"},{"location":"documentation/file_formats/","title":"File formats","text":""},{"location":"documentation/file_formats/#network-file","title":"Network file","text":"<p>The files containing a description of a model have the <code>*.net.alg</code> extension. It is a basic text file with a specific format. The first line is filled with metadata.</p>"},{"location":"documentation/file_formats/#metadata","title":"Metadata","text":"<p>Metadata are a sequence of data at the beginning of the file. They are separated by one space and can be retrieved with the <code>ALG_ReadMetadataFromFile()</code> function.</p> <p>For networks, metadata are (in this order) :</p> <ol> <li>The input size (i.e. the number of inputs)</li> <li>The number of layers</li> </ol> <p>For instance, if the file describes a network with 10 inputs and 5 layers, the first line of the file should be like :</p> <pre><code>10 5\n</code></pre>"},{"location":"documentation/file_formats/#layers","title":"Layers","text":"<p>After metadata, each line of the file represent a layer. Each layer own units, and, units own weights and bias.</p> <p>It means that a units is represented by a sequence of numbers describing the weights and end by number that represent the bias. For instance, if you want to describe a unit with 3 weights of <code>0.234</code>, <code>1.456</code>, <code>-2.748</code> and a bias of <code>0</code> you should write :</p> <pre><code>0.234 1.456 -2.748 0\n</code></pre> <p>To add more than one unit to the layer, write a sequence of units like :</p> <pre><code>0.234 1.456 -2.748 0 0.234 1.456 -2.748 0\n</code></pre> <p>In the example above, you have a layer with two units with the same weights and the same bias but feel free to change them.</p> <p>Bias</p> <p>The bias must be at the end of the units weights sequence.</p>"},{"location":"documentation/manage_data/","title":"Manage data","text":""},{"location":"documentation/manage_data/#load-data","title":"Load Data","text":"<p>This section is empty. Work in progress.</p>"},{"location":"documentation/manage_networks/","title":"Manage networks","text":"<p>A network is an <code>ALG_Network</code> struct that refers to several layers. It can be seen as a container for the entire network entity.</p>"},{"location":"documentation/manage_networks/#create-networks","title":"Create networks","text":"<p>There are many ways of creating networks. How you do it depends on the situation you're in.</p>"},{"location":"documentation/manage_networks/#create-network","title":"Create network","text":"<p>If you already know the number of layer your network will have, you can use the <code>ALG_CreateNetwork()</code> method as follows :</p> <pre><code>ALG_Network* n = ALG_CreateNetwork(100, 4)\n</code></pre> <p>The first parameter is the number of inputs (or features) and the second parameter is the number of layers in addition to the input layer.</p>"},{"location":"documentation/manage_networks/#create-bare-network","title":"Create bare network","text":"<p>If you don't already know in advance the number of layers, you can create a bare network. This is a network only filled with an input layer. You can add layer later with the <code>ALG_CreateLayerInNetwork()</code> function.</p> <pre><code>// Creates a network with 10 inputs \nALG_Network* n = ALG_CreateBareNetwork(10);\n\n// You can add layer later\n// It creates a new layer of 100 units (neurons) at the end of the network.\nALG_CreateLayerInNetwork(n, 100);\n</code></pre>"},{"location":"documentation/manage_networks/#create-network-from-file","title":"Create network from file","text":"<p>You can create networks from files with the <code>.model.alg</code> extension. To learn more about this file format, you should read the file format documentation page. To load a network from a file, use the <code>ALG_CreateNetworkFromFile()</code> function.</p> <pre><code>FILE *file = fopen(\"path/to/basic_network.model.alg\", \"r\");\nALG_Network* n = ALG_CreateNetworkFromFile(file);\n</code></pre>"},{"location":"documentation/manage_networks/#train-networks","title":"Train networks","text":"<p>This section is empty. Work in progress.</p>"},{"location":"documentation/manage_networks/#monitor-networks","title":"Monitor networks","text":"<p>This section is empty. Work in progress.</p>"},{"location":"downloads/downloads/","title":"Downloads","text":""},{"location":"downloads/downloads/#latest-version","title":"Latest version","text":""},{"location":"downloads/downloads/#ubuntu","title":"Ubuntu","text":"<ul> <li>algone-ubuntu-latest-0.1.36.tar.gz</li> </ul>"},{"location":"downloads/downloads/#windows","title":"Windows","text":"<ul> <li>algone-windows-latest-0.1.36.tar.gz</li> </ul>"},{"location":"downloads/downloads/#macos","title":"MacOS","text":"<ul> <li>algone-macos-latest-0.1.36.tar.gz</li> </ul>"},{"location":"downloads/downloads/#github-releases","title":"Github Releases","text":"<p>To find older versions, you can visit our releases on Github website.</p>"},{"location":"references/debug_and_error/","title":"Debug and Errors","text":""},{"location":"references/debug_and_error/#errors","title":"Errors","text":""},{"location":"references/debug_and_error/#alg_error","title":"<code>ALG_Error</code>","text":"<p>Type : Structure</p> <p>Description : A representation of an error.</p> Variable Type Accessibility Description message <code>char*</code> Read/Write The error message. code <code>ALG_ErrorCode</code> Read/Write An array that describe matrix size. First value is the number of rows. The second value is the number of columns. len <code>size_t</code> Read/Write The error message length. file <code>char*</code> Read/Write The file where the occurred. line <code>int</code> Read/Write The line where the error occurred. hasError <code>bool</code> Read/Write Set to true if the struct if filled."},{"location":"references/debug_and_error/#alg_haserror","title":"<code>ALG_HasError()</code>","text":"<p>Prototype : <code>bool ALG_HasError()</code></p> <p>Description : Returns <code>true</code> if an error has occurred.</p> <p>Mutations and return :</p> Case Name Type Description Return <code>bool</code> True if an error occurred"},{"location":"references/debug_and_error/#alg_geterror","title":"<code>ALG_GetError()</code>","text":"<p>Prototype : <code>ALG_Error* ALG_GetError();</code></p> <p>Description : Retrieves the error if it has occurred.</p> <p>Mutations and return</p> Case Name Type Description Return <code>ALG_Error*</code> Returns the error struct containing current error."},{"location":"references/debug_and_error/#alg_printerror","title":"<code>ALG_PrintError()</code>","text":"<p>Prototype : <code>ALG_Error* ALG_PrintError();</code></p> <p>Description : Print the error on the standard output stream.</p> <p>Mutations and return :</p> <p>No mutations or return.</p>"},{"location":"references/debug_and_error/#alg_seterror","title":"<code>ALG_SetError()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>void ALG_SetError(int errorCode, const char *errorMessage, char *file, int line)</code></p> <p>Description : Fill an <code>ALG_Error</code> struct in the global error variable.</p> <p>Parameters</p> Parameter Type Description errorCode <code>ALG_ErrorCode</code> The code of the error. errorMessage <code>const char</code> A string that contains the error message. file <code>char*</code> The file name where the error occurred. line <code>int</code> The line where the error occurred. <p>Mutations and return</p> <p>No mutations or return.</p>"},{"location":"references/math/","title":"Math","text":""},{"location":"references/math/#matrix","title":"Matrix","text":""},{"location":"references/math/#alg_matrix","title":"<code>ALG_Matrix</code>","text":"<p>Type : Structure</p> <p>Description : A matrix.</p> Variable Type Accessibility Description values <code>double</code> Read/Write A 1D array that contains all the matrix's values. _size <code>size_t</code> Read Only An array that describe matrix size. First value is the number of rows. The second value is the number of columns"},{"location":"references/math/#alg_creatematrix","title":"<code>ALG_CreateMatrix()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>ALG_Matrix *ALG_CreateMatrix(size_t rows, size_t columns, double v)</code></p> <p>Description : Create a matrix.</p> <p>Parameters</p> Parameter Type Description rows <code>int</code> The number of rows. columns <code>int</code> The number of columns. v <code>double</code> The value to init all the matrix. <p>Mutations and return</p> Case Name Type Description Return <code>ALG_Matrix*</code> A pointer to the matrix structure that has been created."},{"location":"references/math/#alg_fillmatrix","title":"<code>ALG_FillMatrix()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>void ALG_FillMatrix(ALG_Matrix *m, double v)</code></p> <p>Description : Fill all the matrix <code>m</code> with the value <code>v</code>.</p> <p>Parameters</p> Parameter Type Description m <code>ALG_Matrix*</code> The matrix to fill. v <code>double</code> The value to use for filling the matrix. <p>Mutations and return</p> Case Name Type Description Mutation m <code>ALG_Matrix*</code> All the values of the matrix are set to <code>v</code>."},{"location":"references/math/#alg_debugmatrix","title":"<code>ALG_DebugMatrix()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>void ALG_DebugMatrix(ALG_Matrix *m)</code></p> <p>Description : Print information about the matrix in the console.</p> <p>Parameters</p> Parameter Type Description m <code>ALG_Matrix*</code> The matrix to debug. <p>Mutations and return</p> <p>No mutations or return.</p>"},{"location":"references/math/#alg_destroymatrix","title":"<code>ALG_DestroyMatrix()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>void ALG_DestroyMatrix(ALG_Matrix *m)</code></p> <p>Description : Free memory of the matrix <code>m</code>.</p> <p>Parameters</p> Parameter Type Description m <code>ALG_Matrix*</code> The matrix to free. <p>Mutations and return</p> Case Name Type Description Mutation m <code>ALG_Matrix*</code> Free the pointer."},{"location":"references/math/#activation","title":"Activation","text":""},{"location":"references/math/#alg_sigmoid","title":"<code>ALG_Sigmoid()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>double ALG_Sigmoid(double x, double lambda)</code></p> <p>Description : Compute the sigmoid function with param <code>lambda</code>. The function is computed with the formula :</p> <p>$$ f_{\\lambda}(x) = \\frac{1}{1 + e^{- \\lambda x}} $$</p> <p>Parameters</p> Parameter Type Description x <code>double</code> The point where sigmoid must be evaluated. lambda <code>double</code> The sigmoid parameter. <p>Mutations and return</p> Case Name Type Description Return <code>double</code> The computed value"},{"location":"references/math/#cost-functions","title":"Cost functions","text":""},{"location":"references/math/#alg_meansquarederror","title":"<code>ALG_MeanSquaredError()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>double ALG_MeanSquaredError(double predictions[], double targets[], size_t batchSize)</code></p> <p>Description : Compute the mean squared function. It is computed with the formula :</p> <p>$$ MSE(x) = \\frac{1}{n} \\sum_{i = 1}^{n}(Y_i - \\hat{Y}_i)^2 $$</p> <p>where $n$ is the number of predictions, $Y_i$ is the target prediction et $\\hat{Y}_i$ is the predicted value.</p> <p>Parameters</p> Parameter Type Description predictions <code>double[]</code> An array of predicted values. Must have the same size as <code>targets</code> targets <code>double[]</code> An array of targets values. Must have the same size as <code>predictions</code> batchSize <code>size_t[]</code> The number of predictions. <p>Mutations and return</p> Case Name Type Description Return <code>double</code> The computed value"},{"location":"references/networks/","title":"Networks","text":""},{"location":"references/networks/#network","title":"Network","text":""},{"location":"references/networks/#alg_network","title":"<code>ALG_Network</code>","text":"<p>Type : Structure</p> <p>Description : The Network structure represent the entire neural network.</p> Variable Type Accessibility Description _layers <code>ALG_Layer**</code> Read Only An array the network layers _nbLayers <code>int</code> Read Only The number of layers in the network"},{"location":"references/networks/#alg_createnetwork","title":"<code>ALG_CreateNetwork()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>Network *ALG_CreateNetwork(int inputSize)</code></p> <p>Description : Create an artificial neural network with the first input layer.</p> <p>Parameters</p> Parameter Type Description inputSize <code>int</code> The number of artificial neurons (units) in the input layer. <p>Mutations and return</p> Case Name Type Description Return <code>Network*</code> A pointer to the network structure that have been created."},{"location":"references/networks/#alg_addlayertonetwork","title":"<code>ALG_AddLayerToNetwork()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>void ALG_AddLayerToNetwork(ALG_Network *n, size_t size)</code></p> <p>Description : Create and append a new layer to a network.</p> <p>Parameters</p> Parameter Type Description n <code>*ALG_Network</code> The network which is going to receive the new layer. size <code>size_t</code> The number of units inside the layer <p>Mutations and return</p> Case Name Type Description Mutation n <code>Network*</code> The network has received a new layer and its size has been incremented by 1."},{"location":"references/networks/#alg_destroynetwork","title":"<code>ALG_DestroyNetwork()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>void ALG_NetworkDestroy(ALG_Network* n)</code></p> <p>Description : Free memory of a network.</p> <p>Parameters</p> Parameter Type Description n <code>ALG_Network*</code> The pointer to free. <p>Mutations and return</p> Case Name Type Description Mutation n <code>ALG_Network*</code> Free the pointer."},{"location":"references/networks/#layer","title":"Layer","text":""},{"location":"references/networks/#alg_layer","title":"<code>ALG_Layer</code>","text":"<p>Type : Structure</p> <p>Description : A Layer is a struct that contains units that are on the same depth in the network.</p> Variable Type Accessibility Description _units <code>ALG_Unit**</code> Read Only The units contained in the layer. _nbUnits <code>size_t</code> Read Only The number of units."},{"location":"references/networks/#alg_createlayer","title":"<code>ALG_CreateLayer()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>ALG_Layer *ALG_CreateLayer(size_t size, ALG_Layer *previousLayer)</code></p> <p>Description : Create a new Layer.</p> <p>Parameters</p> Parameter Type Description size <code>size_t</code> The number of units. previousLayer <code>ALG_Layer*</code> The layer that will forward it's computed units values inside the network. <p>Mutations and return</p> Case Name Type Description Return <code>ALG_Layer*</code> The new layer."},{"location":"references/networks/#alg_destroylayer","title":"<code>ALG_DestroyLayer()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>void ALG_DestroyLayer(ALG_Layer* l)</code></p> <p>Description : Free memory of a layer.</p> <p>Parameters</p> Parameter Type Description l <code>ALG_Layer*</code> The pointer to free. <p>Mutations and return</p> Case Name Type Description Mutation l <code>ALG_Layer*</code> Free the pointer."},{"location":"references/networks/#unit","title":"Unit","text":""},{"location":"references/networks/#alg_unit","title":"<code>ALG_Unit</code>","text":"<p>Type : Structure</p> <p>Description : A Unit represent a network simple computational unit.</p> Variable Type Accessibility Description output <code>double</code> Read/Write The computed output of the artificial neuron _weights <code>*double</code> Read Only The weights values _nbWeights <code>size_t</code> Read Only The number of weights _bias <code>double</code> Read Only The computed bias"},{"location":"references/networks/#alg_createunit","title":"<code>ALG_CreateUnit()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>ALG_Unit *ALG_CreateUnit(size_t size)</code></p> <p>Description : Create a new Unit.</p> <p>Parameters</p> Parameter Type Description size <code>size_t</code> The number of weights. <p>Mutations and return</p> Case Name Type Description Return <code>Unit*</code> The new unit."},{"location":"references/networks/#alg_destroyunit","title":"<code>ALG_DestroyUnit()</code>","text":"<p>Type : Function</p> <p>Prototype : <code>void ALG_DestroyUnit(ALG_Unit *u)</code></p> <p>Description : Free memory of a unit.</p> <p>Parameters</p> Parameter Type Description u <code>*ALG_Unit</code> The unit to destroy. <p>Mutations and return</p> <p>Free the <code>u</code> pointer.</p>"},{"location":"tutorials/mnist/","title":"MNIST","text":"<p>This section is empty. Work in progress.</p>"}]}