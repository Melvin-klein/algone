name: Build Library
on:
  push:
    branches:
      - master
permissions:
  contents: write
jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.tag.outputs.semantic-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check semver incremented value
        id: check_incremented_value
        run: |
          string="${{ github.event.head_commit.message }}"
          if [[ $string == *"#minor"* ]]; then
            echo "incremented_value=minor" >> $GITHUB_OUTPUT
          elif [[ $string == *"#major"* ]]; then
            echo "incremented_value=major" >> $GITHUB_OUTPUT
          else
            echo "incremented_value=patch" >> $GITHUB_OUTPUT
          fi

      - name: Create tag
        id: tag
        uses: SOLIDSoftworks/semver-tags@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag-prefix: 'v'
          default-version: '0.0.1'
          incremented-value: ${{ steps.check_incremented_value.outputs.incremented_value }}
          create-release: false
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        with:
          tag_name: ${{ steps.tag.outputs.semantic-version }}
          release_name: Release ${{ steps.tag.outputs.semantic-version }}
          draft: false
          prerelease: false

  build:
    needs: [release]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Update Apt
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get update

      - name: Install dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt install -y check automake autoconf libtool pkg-config texinfo

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: make build

      - name: Put header files into include directory
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          mkdir ./include
          headers="`find ./src -type f -name "*.h"`"
          cp $headers ./include

      - name: Put header files into include directory
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          mkdir ./include
          headers="`find ./src -type f -name "*.h"`"
          cp $headers ./include

      - name: Create archive
        run: tar czf algone-${{ matrix.os }}.tar.gz ./bin/libalgone.a ./include

      - name: Upload Built Algone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: algone-${{ matrix.os }}.tar.gz
          asset_name: algone-${{ matrix.os }}-${{ needs.release.outputs.version }}.tar.gz
          asset_content_type: application/gzip